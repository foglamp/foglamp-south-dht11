#!/bin/bash

##--------------------------------------------------------------------
## Copyright (c) 2018 OSIsoft, LLC
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------
##
## Author: Ivan Zoratti, Praveen Garg
##

set -e

GIT_ROOT=`pwd`    # The script must be executed from the root git directory
usage="$(basename "$0") help [clean|cleanall]
This script is used to create the Debian package of foglamp dht11 plugin

Arguments:
 help     - Display this help text
 clean    - Remove all the old versions saved in format .XXXX
 cleanall - Remove all the versions, including the last one"

if [ "$(dpkg --print-architecture)" != "armhf" ]; then
    echo "This script is used to create the Debian package for armhf architecture only"
    exit 1
fi

for i in "$@"
do
  case "$i" in
      clean)
          echo -n "Cleaning the build folder from older versions..."
          find "${GIT_ROOT}/packages/build" -maxdepth 1 | grep '.*\.[0-9][0-9][0-9][0-9]' | xargs rm -rf
          echo "Done."
          exit 0
          ;;
      cleanall)
          if [ -d "${GIT_ROOT}/packages/build" ]; then
            echo -n "Cleaning the build folder..."
            rm -rf ${GIT_ROOT}/packages/build/*
            echo "Done."
          else
            echo "No build folder, skipping cleanall"
          fi
          exit 0
          ;;
      help)
          echo "${usage}"
          exit 0
          ;;
      *)
        echo "Unrecognized option: $i"
        exit 1
        ;;
  esac
done

version=`cat ${GIT_ROOT}/VERSION.south.dht11 | tr -d ' ' | grep 'foglamp_south_dht11_version=' | head -1 | sed -e 's/\(.*\)=\(.*\)/\2/g'`
foglamp_version=`cat ${GIT_ROOT}/VERSION.south.dht11 | tr -d ' ' | grep 'foglamp_version' | head -1 | sed -e 's/\(.*\)version\(.*\)/\2/g'`
BUILD_ROOT="${GIT_ROOT}/packages/build"

# Final package name
package_name="foglamp-south-dht11-${version}"

# Print the summary of findings
echo "The package root directory is         : ${GIT_ROOT}"
echo "The FogLAMP south dht11 version is    : ${version}"
echo "The package will be built in          : ${BUILD_ROOT}"
echo "The package name is                   : ${package_name}"
echo

# Create the package directory. If a directory with the same name exists,
# it is copied with a version number.

# First, create the BUILD_ROOT folder, if necessary
if [ ! -L "${BUILD_ROOT}" -a ! -d "${BUILD_ROOT}" ]; then
    mkdir -p "${BUILD_ROOT}"
fi

cd "${BUILD_ROOT}"
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.%04d" "${existing_pkgs}")
if [ -d "${package_name}" ]; then
    echo "Saving the old working environment as ${new_stored_pkg}"
    mv "${package_name}" "${new_stored_pkg}"
fi
mkdir "${package_name}"

echo -n "Populating the package and updating version file..."
cd "${package_name}"
cp -R ${GIT_ROOT}/packages/Debian/* .
sed -i "s/Version: 1.0.0/Version: ${version}/g" DEBIAN/control
sed -i "s/Depends: foglamp/Depends: foglamp (${foglamp_version})/g" DEBIAN/control

mkdir -p usr/local/foglamp
cd usr/local/foglamp
find ${GIT_ROOT}/python | grep -E "(__pycache__|\.pyc|\.pyo$)" | xargs rm -rf
cp -R ${GIT_ROOT}/python .
cp -R ${GIT_ROOT}/VERSION.south.dht11 .
echo "Done."

# Build the package
cd "${BUILD_ROOT}"

# Save the old versions
existing_pkgs=`find . -maxdepth 1 -name "${package_name}.deb.????" | wc -l`
existing_pkgs=$((existing_pkgs+1))
new_stored_pkg=$(printf "${package_name}.deb.%04d" "${existing_pkgs}")

if [ -e "${package_name}.deb" ]; then
    echo "Saving the old package as ${new_stored_pkg}"
    mv "${package_name}.deb" "${new_stored_pkg}"
fi

echo "Building the new package..."
dpkg-deb --build ${package_name}
echo "Building Complete."

exit 0
